{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ResultDisplay","e","newVal","target","value","this","props","updateValue","length","react_default","a","createElement","className","current","field","onChange","fieldUpdate","bind","Component","NumberPad","_this","onClick","clearClicked","numberClicked","operatorClicked","equalClicked","App","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","currentIsAnswer","fieldIsDefaultOrAns","assertThisInitialized","newDig","num","fieldSaved","setState","toString","newField","oper","updatedCurrent","mod","replace","math","eval","App_ResultDisplay","App_NumberPad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaf626de.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport math from 'mathjs';\n\nclass ResultDisplay extends Component{\n  fieldUpdate(e){\n    const newVal = e.target.value;\n    //this.props.updateValue(newDig);\n    this.props.updateValue(newVal[newVal.length - 1]);\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"current\">{this.props.current}</div>\n        <div><input className=\"field\" value = {this.props.field} onChange = {this.fieldUpdate.bind(this)}></input></div>\n      </div>\n    )\n  }\n}\n\nclass NumberPad extends Component{\n  render() {\n    return (\n      <div>\n        <div className = \"board-row\">\n          <button className='square operator'>x!</button>\n          <button className='square operator'>√</button>\n          <button className='square operator'>%</button>\n          <button className='square operator' onClick={() => this.props.clearClicked()}>C</button>\n        </div>\n        <div className = \"board-row\">\n          <button className='square number' onClick={() => this.props.numberClicked(7)}>7</button>\n          <button className='square number' onClick={() => this.props.numberClicked(8)}>8</button>\n          <button className='square number' onClick={() => this.props.numberClicked(9)}>9</button>\n          <button className='square operator' onClick={() => this.props.operatorClicked('÷')}>÷</button>\n        </div>\n        <div className = \"board-row\">\n          <button className='square number' onClick={() => this.props.numberClicked(4)}>4</button>\n          <button className='square number' onClick={() => this.props.numberClicked(5)}>5</button>\n          <button className='square number' onClick={() => this.props.numberClicked(6)}>6</button>\n          <button className='square operator' onClick={() => this.props.operatorClicked('×')}>×</button>\n        </div>\n        <div className = \"board-row\">\n          <button className='square number' onClick={() => this.props.numberClicked(1)}>1</button>\n          <button className='square number' onClick={() => this.props.numberClicked(2)}>2</button>\n          <button className='square number' onClick={() => this.props.numberClicked(3)}>3</button>\n          <button className='square operator' onClick={() => this.props.operatorClicked('-')}>-</button>\n        </div>\n        <div className = \"board-row\">\n          <button className='square number' onClick={() => this.props.numberClicked(0)}>0</button>\n          <button className='square number' onClick={() => this.props.numberClicked('.')}>.</button>\n          <button className='square operator' onClick={() => this.props.equalClicked()}>=</button>\n          <button className='square operator' onClick={() => this.props.operatorClicked('+')}>+</button>\n        </div>\n        </div>\n    )\n  }\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      field: '0',\n      current: 'Ans = 0',\n      currentIsAnswer: true,\n      fieldIsDefaultOrAns: true,\n    }\n    this.numberClicked = this.numberClicked.bind(this);\n    this.equalClicked = this.equalClicked.bind(this);\n    this.clearClicked = this.clearClicked.bind(this);\n    this.updateValue = this.updateValue.bind(this);\n    this.operatorClicked = this.operatorClicked.bind(this);\n  }\n\n  updateValue(newDig) {\n    if (newDig === '*') {\n        this.operatorClicked('×');\n    } else if (newDig === '/') {\n        this.operatorClicked('÷');\n    } else if (newDig === '=') {\n        this.equalClicked();\n    } else if (newDig === '+' || newDig === '-'){\n        this.operatorClicked(newDig);\n    } else {\n        this.numberClicked(newDig);\n    }\n  }\n\n  numberClicked(num){\n    if (this.state.fieldIsDefaultOrAns){\n        const fieldSaved = this.state.field;\n        this.setState({\n          field: num.toString(),\n          fieldIsDefaultOrAns: false,\n          current: 'Ans = ' + fieldSaved,\n        })\n    } else {\n        let newField = this.state.field.toString() + num.toString();\n        this.setState({\n          field: newField,\n        })\n    }\n  }\n\n  operatorClicked(oper){\n    if (!this.state.currentIsAnswer) {\n      const updatedCurrent = 'Ans = ' + this.state.field;\n      this.setState({\n        current: updatedCurrent,\n        currentIsAnswer: true,\n      })\n    }\n\n    if (this.state.fieldIsDefaultOrAns){\n      this.setState({\n        fieldIsDefaultOrAns: false,\n      })\n    }\n\n    let newField = this.state.field.toString() + oper.toString();\n    this.setState({\n      field: newField,\n    })\n  }\n\n  equalClicked(){\n    const fieldSaved = this.state.field.toString();\n    let mod = fieldSaved.replace(/×/g,'*');\n    mod = mod.replace(/÷/g,'/');\n    mod = mod.replace(/√/g, 'sqrt')\n    const newField = math.eval(mod);\n    this.setState({\n      field: newField,\n      current: fieldSaved + '=',\n      currentIsAnswer: false,\n      fieldIsDefaultOrAns: true,\n    })\n  }\n\n  clearClicked(){\n    if (!this.state.currentIsAnswer) {\n      const updatedCurrent = 'Ans = ' + this.state.field;\n      this.setState({\n        current: updatedCurrent,\n        currentIsAnswer: true,\n      })\n    }\n\n    this.setState({\n      field: '0',\n      fieldIsDefaultOrAns: true,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ResultDisplay current={this.state.current} field={this.state.field} updateValue={this.updateValue}/>\n        <NumberPad numberClicked={this.numberClicked} equalClicked={this.equalClicked} clearClicked={this.clearClicked} operatorClicked={this.operatorClicked}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}